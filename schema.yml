openapi: 3.0.3
info:
  title: Agenda.ai API
  version: 1.0.0
  description: API feita para a plataforma Agenda.ai
paths:
  /api/login/:
    post:
      operationId: login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/login/refresh/:
    post:
      operationId: login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/room/:
    post:
      operationId: room_create
      tags:
      - room
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Room'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Room'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: ''
  /api/room/{blockName}/:
    get:
      operationId: room_list
      parameters:
      - in: path
        name: blockName
        schema:
          type: string
        required: true
      tags:
      - room
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
          description: ''
  /api/room/{id}:
    get:
      operationId: room_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this room.
        required: true
      tags:
      - room
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: ''
    delete:
      operationId: room_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this room.
        required: true
      tags:
      - room
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/rooms/:
    get:
      operationId: rooms_list
      tags:
      - rooms
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
          description: ''
  /api/schedule/:
    post:
      operationId: schedule_create
      tags:
      - schedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scheduling'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Scheduling'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Scheduling'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scheduling'
          description: ''
  /api/schedule/{id}/:
    get:
      operationId: schedule_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this scheduling.
        required: true
      tags:
      - schedule
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scheduling'
          description: ''
    delete:
      operationId: schedule_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this scheduling.
        required: true
      tags:
      - schedule
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/schedule/{scheduling_date}/date/:
    get:
      operationId: schedule_date_list
      parameters:
      - in: path
        name: scheduling_date
        schema:
          type: string
        required: true
      tags:
      - schedule
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchedulingReturn'
          description: ''
  /api/schedule/{user_id}/user/:
    get:
      operationId: schedule_user_list
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - schedule
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchedulingReturn'
          description: ''
  /api/schedule/all/:
    get:
      operationId: schedule_all_list
      tags:
      - schedule
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scheduling'
          description: ''
  /api/user/:
    post:
      operationId: user_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/{id}/:
    get:
      operationId: user_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser'
          description: ''
    put:
      operationId: user_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser'
          description: ''
    patch:
      operationId: user_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUpdateUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUpdateUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUpdateUser'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser'
          description: ''
    delete:
      operationId: user_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/user/all/:
    get:
      operationId: user_all_list
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
  /api/user/login/:
    post:
      operationId: user_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyTokenObtainPair'
          description: ''
components:
  schemas:
    MyTokenObtainPair:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    Nested:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        room_type:
          $ref: '#/components/schemas/RoomTypeEnum'
        block:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        name:
          type: string
          maxLength: 100
      required:
      - block
      - id
      - name
    PatchedUpdateUser:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        room_type:
          $ref: '#/components/schemas/RoomTypeEnum'
        block:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        name:
          type: string
          maxLength: 100
      required:
      - block
      - id
      - name
    RoomTypeEnum:
      enum:
      - Laboratório
      - Sala de Aula
      type: string
    Scheduling:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        scheduling_date_start:
          type: string
          format: date
        scheduling_date_end:
          type: string
          format: date
        scheduling_time_start:
          $ref: '#/components/schemas/SchedulingTimeStartEnum'
        scheduling_time_end:
          $ref: '#/components/schemas/SchedulingTimeEndEnum'
        description:
          type: string
          maxLength: 255
        is_active:
          type: boolean
          readOnly: true
        room:
          type: string
          format: uuid
        user:
          allOf:
          - $ref: '#/components/schemas/UserReturn'
          readOnly: true
      required:
      - id
      - is_active
      - room
      - scheduling_date_end
      - user
    SchedulingReturn:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        scheduling_date_start:
          type: string
          format: date
        scheduling_date_end:
          type: string
          format: date
        scheduling_time_start:
          $ref: '#/components/schemas/SchedulingTimeStartEnum'
        scheduling_time_end:
          $ref: '#/components/schemas/SchedulingTimeEndEnum'
        description:
          type: string
          maxLength: 255
        is_active:
          type: boolean
        room:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserReturn'
          readOnly: true
      required:
      - id
      - room
      - scheduling_date_end
      - user
    SchedulingTimeEndEnum:
      enum:
      - 07:00:00
      - 07:50:00
      - 08:40:00
      - 09:30:00
      - 09:50:00
      - '10:40:00'
      - '11:30:00'
      - '12:20:00'
      - '13:20:00'
      - '14:10:00'
      - '15:00:00'
      - '15:50:00'
      - '16:10:00'
      - '17:00:00'
      - '17:50:00'
      - '18:40:00'
      - '18:10:00'
      - '19:00:00'
      - '19:50:00'
      - '20:40:00'
      - '20:50:00'
      - '21:40:00'
      - '22:30:00'
      type: string
    SchedulingTimeStartEnum:
      enum:
      - 07:00:00
      - 07:50:00
      - 08:40:00
      - 09:30:00
      - 09:50:00
      - '10:40:00'
      - '11:30:00'
      - '12:20:00'
      - '13:20:00'
      - '14:10:00'
      - '15:00:00'
      - '15:50:00'
      - '16:10:00'
      - '17:00:00'
      - '17:50:00'
      - '18:40:00'
      - '18:10:00'
      - '19:00:00'
      - '19:50:00'
      - '20:40:00'
      - '20:50:00'
      - '21:40:00'
      - '22:30:00'
      type: string
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    UpdateUser:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
      required:
      - email
      - first_name
      - last_name
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 255
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        password:
          type: string
          writeOnly: true
        is_professor:
          type: boolean
        img:
          type: string
          format: uri
          nullable: true
          maxLength: 200
      required:
      - email
      - first_name
      - id
      - is_professor
      - last_name
      - password
    UserReturn:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 255
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        img:
          type: string
          format: uri
          nullable: true
          maxLength: 200
      required:
      - email
      - first_name
      - id
      - last_name
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
